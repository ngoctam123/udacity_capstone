version: 2.1

executors:
  python:
    docker:
      - image: circleci/python:3.7.3-stretch
  aws:
    docker:
      - image: amazon/aws-cli

jobs:
  #lint dockerfile with hadolint
  Lint:
    executor: python
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            sudo make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            sudo make lint    
  
  image-build-push:
    #docker build and push image to the docker hub
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build/Push docker image
          command: |
            #Login to docker hub
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            # Build image and add a descriptive tag
            docker build --tag=capstone .
            # List docker images
            docker image ls
            # Push image to a docker repository
            docker tag capstone tamvn/capstone
            docker push tamvn/capstone

  create-cluster:
    #create the kubernetes cluster
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          EKS CLuster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.micro
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''

  deploy-to-cluster:
    #create a load balancer and create rolling update deploymnet
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          K8s deployment
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployment.yml
          resource-name: deployment/capstone

  check-cluster:
    #checking if the cluster is created and listed correctly
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Checking Cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: check cluster
          command: |
            kubectl get services
            kubectl get deployment
            kubectl get nodes



orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

workflows:
  default:
    jobs:
      - Lint
      - image-build-push:
          requires: [Lint]
      - create-cluster:
          cluster-name: capstone
          #creating and deploying cluster should be triggered via master branch only.
          filters:
            branches:
              only: [main]
      - deploy-to-cluster:
          cluster-name: capstone
          requires: [create-cluster]
      - aws-eks/update-container-image:
          cluster-name: capstone
          container-image-updates: capstone=tamvn/capstone
          record: true
          requires: [deploy-to-cluster]
          resource-name: deployment/capstone
      - check-cluster:
          cluster-name: capstone
          requires: [aws-eks/update-container-image]


